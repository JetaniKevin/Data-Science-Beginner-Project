# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W7HlTjxlKeeySrlmdwaKENEn6MIS_IoW

# **My First ML Project**

# **Load Data**
"""



"""# **Data Preparation**"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/refs/heads/master/delaney_solubility_with_descriptors.csv')

df

"""### **Data Separation as x and y**"""

y = df['logS']
y

x = df.drop('logS', axis=1)
x

"""### **Data Spliiting**"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=100)

x_train

x_test

"""# **Linear Regression**

### Training the Model
"""



from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(x_train, y_train)

"""## Applying the Model to make a Prediction"""

y_lr_train_pred = lr.predict(x_train)
y_lr_test_pred = lr.predict(x_test)

y_lr_train_pred

y_lr_test_pred

"""## Evaluate Model Performance"""

from sklearn.metrics import mean_squared_error, r2_score

lr_train_mse = mean_squared_error(y_train, y_lr_train_pred)
lr_train_r2  = r2_score(y_train, y_lr_train_pred)

lr_test_mse = mean_squared_error(y_test, y_lr_test_pred)
lr_test_r2  = r2_score(y_test, y_lr_test_pred)

print('LR MSE (Train): ', lr_train_mse)
print('LR R2 (Train):', lr_train_r2)
print('LR MSE (Test): ', lr_test_mse)
print('LR R2 (Test):', lr_test_r2)

lr_results = pd.DataFrame(['Linear regression', lr_train_mse, lr_train_r2, lr_test_mse, lr_test_r2]).transpose()
lr_results.columns = ['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2']

lr_results

"""# **Random Forest**

## Training the Model
"""

from sklearn.ensemble import RandomForestRegressor

rf = RandomForestRegressor(max_depth=2, random_state=100)
rf.fit(x_train, y_train)

"""## Applying the model to make prediction"""

y_rf_train_pred = rf.predict(x_train)
y_rf_test_pred = rf.predict(x_test)

y_rf_train_pred

y_rf_test_pred

"""## Evaluate Model Performance"""

rf_train_mse = mean_squared_error(y_train, y_rf_train_pred)
rf_train_r2  = r2_score(y_train, y_rf_train_pred)

rf_test_mse = mean_squared_error(y_test, y_rf_test_pred)
rf_test_r2  = r2_score(y_test, y_rf_test_pred)

print('rf MSE (Train): ', rf_train_mse)
print('rf R2 (Train):', rf_train_r2)
print('rf MSE (Test): ', rf_test_mse)
print('rf R2 (Test):', rf_test_r2)

rf_results = pd.DataFrame(['Random Forest', rf_train_mse, rf_train_r2, rf_test_mse, rf_test_r2]).transpose()
rf_results.columns = ['Method', 'Training MSE', 'Training R2', 'Test MSE', 'Test R2']
rf_results

"""# **Model Comparision**"""

df.models = pd.concat([lr_results, rf_results], axis=0)
df.models.reset_index(drop=True)

"""# **Data visualization of Prediction results**"""

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(5,5))
plt.scatter(x=y_train, y=y_lr_train_pred, alpha=0.3)
plt.ylabel('Predicted logS')
plt.xlabel('Experimental logS')
plt.plot()

